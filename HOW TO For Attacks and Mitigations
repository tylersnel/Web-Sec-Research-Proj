
Steps and Instructions:
    Numbered steps: Break down the task into clear, sequential steps with descriptive titles.
    Short and informative sentences: Avoid overly complex language.
    Screenshots and GIFs: Add visuals to illustrate key steps, especially for non-intuitive actions.
    Code snippets: Include relevant code snippets if necessary, formatted correctly with syntax highlighting.
    Error handling: Mention potential errors or issues users might face and how to troubleshoot them.

Additional Resources:
    Links to official documentation: Offer references for further learning or deeper technical understanding.
    Related how-to pages: Link to guides for similar tasks, if applicable.
    Community forums: Offer links to relevant forum discussions for user questions and troubleshooting.


Injection:
    SQL Injection:
        1. Put [tyler' OR '1'='1] or [tyler'-- ] (note there is a space after --) with brackets removed in the username field.
        2. Enter anything in the password field.
        3. Login and you will be in Tyler's account
    UNION SQL Injection:
        1. Put [tyler' UNION ALL SELECT NULL, NULL, NULL, NULL, NULL FROM users-- ] (note there is a space after --) with brackets removed in the username field.
        3. Enter anything in the password field.
        2. No syntax error. This means we know the number of columns in table users for intel gathering
    Error Based 1:
        1. Put ['] with brackets removed in the username field.
        2. Put anything in the password field.
        3. A syntax error will appear.
        4. Put the error into ChatGPT and ask it what type of database is it from or the database type will be in the error message.
        5. Error message also provides where the error occurred in the query and file path. 
    Error Based 2:
        1. Put [' OR 1=1;--] with brackets removed in the username field.
        2. Put anything in the password field.
        3. A syntax error will appear.
        4. Error shows where in query error occurred thus giving us the name of one of the columns in the DB, password.
    Solution:
        The first prevention technique we used was the PHP function mysqli_real_escape_string() on user inputs. The function is used to escape special characters
        in a string when dealing with user input that is used in SQL queries. it adds escape characters before certain characters that have special meanings in SQL
        queries. It ensures the string can be safely used in an SQL query. Next, we used parametrized values and prepared statements for extra security.

        Parametrized values are denoted by '?' ($sql = "SELECT * FROM users WHERE user_name=? AND password=?";) and they separate SQL code from the user input data.
        Later on in the code, prepared statements are used to bind values to these placeholders. Prepared statements ($stmt = $conn->prepare($sql);) separate SQL code from data. When these two features
        work in conjunction, they ensure user input is treated as data and not executable code.
    
  
    

Broken-Access Control
    Vertical privilege escalation - where user can get admin privileges 
    Horizontal privilege escalation - where user can get access to other users data
Cryptographic Failures
Insecure Design
Security Misconfiguration
Vulnerable and Outdated Components 
